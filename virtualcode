import cv2
import numpy as np
import time
from keys import*

from handTracker import*

from pynput.keyboard import Controller

def getMousPos(event, x, y, flags, param):
    global clickedx, clickedy
    global mousex, mousey
    if event == cv2.EVENT_LBUTTONUP:
        if event == cv2.EVENT_MOUSEMOVE:
            print(x,y)
            mousex, mousey = x, y
def calculateIntDidtance (pti, pt2):
    return int(((pt1[0]-pt2[0])**2+ (pt1[1]-pt2[1])**2)**0.5)

# Creating keys
w,h=80, 60
startx,starty= 40,200
keys=[]

letters =list("QWERTYUIOPASDFGHJKLZXCVBNM")

for i,l in enumerate(letters):
    if i<10:
        keys.append(Key(startX + i*w + i*5, startY, w, h, l))
    elif i<19:
        keys.append(Key(startX+ (i-10)*w+i*5, startY+h+5,w,h,l))
    else:
        keys.append(Key(startX+ (i-19)*w+ i*5, startY+ 2*h + 10, w, h, l))
keys.append(Key(startX+25, startY+3*h+15, 5*w, h, "Space"))

keys.append(Key(startX+8*w + 58, starty+2*h+10, w, h, "clr"))

keys.append(Key(startX+5*w+30, starty+3*h+15, 5*w, h, "<--"))

showKey = Key (300,5,80,50, 'Show')

exitkey = key(300,65,80,50, 'Exit')
textBox=Key(startX, startY-h-5, 10*w+9*5, h,'')

cap = cv2.VideoCapture(8)

ptime=0

# initiating the hand tracker

tracker = HandTracker(detectionCon=0.5)

# getting frome's height and width frameHeight, frameWidth, cap.read()[1].shape

showkey.x= int(framewidth*1.5)-85
exitkey.x= int(framewidth*1.5) - 85

#print(showkey.x)

clickedx, clickedy = 0, 0

mousX, mousY= 0, 0

show = False

cv2.namedWindow("video")

counter=0
previousClick = 0

keyboard = Controller()

while True:
    if counter>0:
        counter-=1


signTipX=0
signTipy=0

thumbTipx = 0

thumbTipy = 0

ret, frame=cap.read()

if not ret:
    break

frame = cv2.resize(frame, (int(frameWidth*1.5), int(FrameHeight*1.5)))

frame = cv2.flip(frame,1) #find hands

frame = tracker.findHands(frame)

ImList=tracker.getPostion (frame, draw=False)

if Imlist:
    signTipX, signTipY= lmList[8][1], lmList[8][2]
    signTip2x, signTip2y=lmList[9][1], lmList[9][2]
    thumbTipX, thumbTipy=lmList[4][1], lmList[4][2]

if calculateIntDidtance((signTipX, signTipy), (thumbTipX, thumbTipY)) <50:
    centerX= int((signTipX+thumbTipx)/2)
    centerY =int((signTipY+ thumbTipY)/2)
    cv2.line(frame, (signTipX, signTipY), (thumbTipX, thumbTipY), (0,255,0))
    cv2.circle(frame, (centerx, centery), 5, (8,255,0), cv2.FILLED)
ctime = time.time()

fps = int(1/(ctime-ptime))

cv2.putText(frame, str(fps) + " FPS", (10,20), cv2.FONT_HERSHEY SIMPLEX, 0.8, (0,255,0))

showkey.drawKey(frame, (255,255,255), (0,0,0),0.1, fontScale=0.5)

exitkey.drawKey(frame, (255,255,255), (0,0,0),0.1, fontScale=0.5)
cv2.setMouseCallback('video', getMousPos)

if showkey.isover (clickedx, clickedy):
    show not show

showkey.text = "Hide" if show else "Show"

clickedx, clickedY= 0, 0

if exitkey.isOver (clickedX, clickedY):
    exit()

#checking if sign finger is over a key and if click happens alpha = 0.5

if show:
    textBox.drawkey (frame, (255,255,255), (0,0,0), 0.3)
    for k in keys:
        if k.isOver (mousex, mouseY) or k.isOver (signTipX, signTipy):
            alpha = 0.1
#writing using mouse right click
            if k.isOver(clickedx, clickedY):
                if k.text='<--':
                    textBox.text textBox.text[:-1]
                elif k.text == 'clr':
                    textBox.text =''
                elif len(textBox.text) < 30:
                    if k.text =='Space':
                        textBox.text+= " "
                    else:
                        textBox.text+k.text
            if (k.isOver (thumbTipX, thumbTipY)):
                clickTime=time.time()
                if clickTime - previousClick > 0.6:
                    if k.text='<--':
                        textBox.text= textBox.text[:-1]
                    elif k.text == 'clr':
                        textBox.text =''
                    elif len(textBox.text) < 30:
                        if k.text =='Space':
                            textBox.text+= ""
                        else:
                            textBox.text+ =k.text
#simulating the press of actuall keyboard
                            keyboard.press (k.text)
                    previousClick= clickTime
        k.drawkey (frame, (255,255,255), (0,0,0), alpha=alpha)


        alpha = 0.5
    clickedx, clickedy = 0,0
ptime=ctime

cv2.imshow("video", frame)

pressedkey=cv2.waitkey(1)
if pressedkey==ord('q'):
    break
cap.release()
cv2.destroyAllWindows()
